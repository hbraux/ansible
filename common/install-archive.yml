- name: installation of {{ install.module }}-{{ install.version }}
  debug:
    msg: install={{ install }}
    verbosity: 1
    
- name: install / prepare
  set_fact:
    url: "{{ global.mirrors.apache }}/{{ install.file | dirname }}"
    archive: "{{ install.file | basename }}"
  when: install.file is defined

- name: install / prepare
  set_fact: 
    url: "{{ global.mirrors.apache }}/{{ install.module }}/{{ install.module }}-{{ install.version }}"
    archive: "{{ install.module }}-{{ install.version }}.tar.gz"
  when: install.file is not defined

- name: install / create group {{ install.group }}
  group:
    name: "{{ install.group }}"
    state: present
  become: true
  
- name: install / create user {{ install.user }}
  user:
    name: "{{ install.user }}"
    password: "{{ install.user | password_hash('sha512') }}"
    group: "{{ install.group }}"
  become: true
  
- name: install / create data directory {{ install.path.data }}
  file:
    path: "{{ install.path.data }}"
    owner: "{{ install.user }}"
    group: "{{ install.group }}"
    state: directory
  become: true
  
- name: install / create log directory {{ install.path.log }}
  file:
    path: "{{ install.path.log }}"
    owner: "{{ install.user }}"
    group: "{{ install.group }}"
    state: directory
  become: true
  
- name: install / create config directory {{ install.path.cfg }}
  file:
    path: "{{ install.path.cfg }}"
    owner: "{{ install.user }}"
    group: "{{ install.group }}"
    state: directory
  when: install.cfg is defined
  become: true


- name: install / check if {{ archive }} is in /tmp 
  stat:
    path: /tmp/{{ archive }}
  register: check_path
  
- name: install / download {{ archive }} from {{ url }}
  get_url:
    url: "{{ url }}/{{ archive }}"
    dest: /tmp
  environment: "{{ global.proxyenv }}"
  when: not check_path.stat.exists 
  
- name: install / unarchive {{ archive }} 
  unarchive:
    src: /tmp/{{ archive }}
    dest: /opt
    owner: "{{ install.user }}"
    group: "{{ install.group }}"
    remote_src: yes
  become: true

- name: install / create link {{ install.path.opt }} to {{ install.path.bin }}
  file:
    src: "{{ install.path.bin }}"
    dest: "{{ install.path.opt }}"
    state: link
  become: true
  
- name: install / configure {{ install.module }}
  template:
    src: "{{ item }}.j2"
    dest: "{{ install.path.cfg }}/{{ item }}"
    owner: "{{ install.user }}"
    group: "{{ install.group }}"
  with_items: "{{ install.cfg }}"
  when: install.cfg is defined
  become: true
  
- name: install / create data files
  template:
    src: "{{ item }}.j2"
    dest: "{{ install.path.data }}/{{ item }}"
    owner: "{{ install.user }}"
    group: "{{ install.group }}"
  with_items: "{{ install.data }}"
  when: install.data is defined
  become: true
  
- name: install / create systemd scripts
  template:
    src: "{{ item }}-service.j2"
    dest: /etc/systemd/system/{{ item }}.service
  with_items: "{{ install.services }}"
  when: install.services is defined 
  become: true
  
- name: install / start services
  service: name="{{ item }}" state=started enabled=yes
  with_items: "{{ install.services }}"
  when: install.services is defined
  become: true
  
- name: install / create site file for {{ install.module }}
  template:
    src: "{{ install.site }}.j2"
    dest: "{{ global.localhost.sitedir }}/{{ install.site }}"
  when: install.site is defined
  delegate_to: localhost
