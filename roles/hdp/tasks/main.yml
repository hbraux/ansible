- name: install HDP dependencies
  yum:
    name: "{{ item }}"
  environment:  "{{ global.proxyenv }}"
  become: true
  with_items:
    - unzip
    - net-tools

# HDP Zookeper brings this useless dependency
- name: copy fake redhat-lsb
  copy:
    src: redhat-lsb-4.1-27.el7.centos.1.x86_64.rpm
    dest: /opt
  become: true

- name: install fake redhat-lsb
  yum:
    name: /opt/redhat-lsb-4.1-27.el7.centos.1.x86_64.rpm
    state: present
  become: true

- name: install HDP repo
  yum_repository:
    name: HDP
    description: HDP-{{ hdp.version }}
    baseurl: "{{ hdp.url }}"
    gpgcheck: no
  environment:  "{{ global.proxyenv }}"
  become: true

- name: pre-install basic HDP packages
  yum:
    name: "{{item }}"
  environment:  "{{ global.proxyenv }}"
  become: true
  with_items:
    - hdp-select
    - zookeeper-server
    - hadoop-hdfs-datanode
    - hadoop-hdfs-namenode
    - hadoop-hdfs-secondarynamenode
    - hadoop-yarn-nodemanager 
    - hadoop-yarn-resourcemanager
    - hadoop-yarn-timelineserver
    - hadoop-mapreduce
    - hadoop-mapreduce-historyserver
    - hbase
    - hive-server
    - ranger-admin

- name: adding proxy to YUM configuration
  lineinfile:
    path: /etc/yum.conf
    regexp: "^proxy="
    line: "proxy={{ global.proxyenv.http_proxy }}"
  become: true

- name: refresh yum
  yum:
    list: available
  environment:  "{{ global.proxyenv }}"
  become: true

- name: check if version is already registered 
  uri:
    url: http://localhost:8080/api/v1/version_definitions/1
    method: GET
    user: admin
    password: "{{ hdp.password }}"
    status_code: 200,404
    force_basic_auth: yes
  register: request_version

- name: download definition file for {{ hdp.name }}
  get_url:
    url: "{{ hdp.url }}/HDP-{{ hdp.subversion }}.xml"
    dest: /opt/HDP.xml
  environment:  "{{ global.proxyenv }}"
  become: true
  when: request_version.status == 404

- name: registering the version for {{ hdp.subversion }}
  uri:
    url: http://localhost:8080/api/v1/version_definitions
    method: POST
    user: admin
    password: "{{ hdp.password }}"
    body: "{{ api.create_version | to_json }}"
    status_code: 201
    force_basic_auth: yes
    body_format: raw
    headers:
      X-Requested-By: "ambari"
  when: request_version.status == 404


- name: prepare blueprint API
  uri:
    url: http://localhost:8080/api/v1/blueprints/singlenode?validate_topology=false
    method: POST
    user: admin
    password: "{{ hdp.password }}"
    body: "{{ api.create_blueprint | to_json }}"
    status_code: 201
    force_basic_auth: yes
    body_format: raw
    headers:
      X-Requested-By: "ambari"

- name: creating cluster {{ hdp.clusterid }} 
  uri:
    url: http://localhost:8080/api/v1/clusters/{{ hdp.clusterid }}
    method: POST
    user: admin
    password: "{{ hdp.password }}"
    body: "{{ api.create_cluster |to_json  }}"
    status_code: 202
    force_basic_auth: yes
    body_format: raw
    headers:
      X-Requested-By: "ambari"

- name: restart ambari-agent??
  debug:
    msg: ambari-agent not restarted

    
