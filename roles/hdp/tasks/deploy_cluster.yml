- name: check if version is already registered 
  uri:
    url: http://localhost:8080/api/v1/version_definitions/1
    method: GET
    user: admin
    password: "{{ hdp.cluster.pass }}"
    status_code: 200,404
    force_basic_auth: yes
  register: request_version

- name: download definition file for {{ hdp.name }}
  get_url:
    url: "{{ hdp.url }}/HDP-{{ hdp.subversion }}.xml"
    dest: /opt/HDP.xml
  environment:  "{{ global.proxyenv }}"
  become: true
  when: request_version.status == 404

- name: registering the version for {{ hdp.subversion }}
  uri:
    url: http://localhost:8080/api/v1/version_definitions
    method: POST
    user: admin
    password: "{{ hdp.cluster.pass }}"
    body: "{{ api.create_version | to_json }}"
    status_code: 201
    force_basic_auth: yes
    body_format: raw
    headers:
      X-Requested-By: "ambari"
  when: request_version.status == 404


- name: check if cluster is already created
  uri:
    url: http://localhost:8080/api/v1/clusters/{{ hdp.cluster.id }}
    method: GET
    user: admin
    password: "{{ hdp.cluster.pass }}"
    status_code: 200,404
    force_basic_auth: yes
  register: request_cluster

- name: prepare blueprint API
  uri:
    url: http://localhost:8080/api/v1/blueprints/singlenode?validate_topology=false
    method: POST
    user: admin
    password: "{{ hdp.cluster.pass }}"
    body: "{{ api.create_blueprint | to_json }}"
    status_code: 201
    force_basic_auth: yes
    body_format: raw
    headers:
      X-Requested-By: "ambari"
  when: request_cluster.status == 404

- name: submit creation request for cluster {{ hdp.cluster.id }}
  uri:
    url: http://localhost:8080/api/v1/clusters/{{ hdp.cluster.id }}
    method: POST
    user: admin
    password: "{{ hdp.cluster.pass }}"
    body: "{{ api.create_cluster |to_json  }}"
    status_code: 202
    force_basic_auth: yes
    body_format: raw
    headers:
      X-Requested-By: "ambari"
  when: request_cluster.status == 404

# checking NameNode UI
- name: wait for HDFS services to start
  wait_for:
    port: 8020
    host: "{{ inventory_hostname }}"
    timeout: 600

# checking RessourceManager UI
- name: wait for YARN services to start
  wait_for:
    port: 8088
    host: "{{ inventory_hostname }}"
    timeout: 600


