# Enable Kerberos
# See https://cwiki.apache.org/confluence/display/AMBARI/Automated+Kerberizaton

- name: get default Kerberos Descriptor
  uri:
    url: http://localhost:8080/api/v1/stacks/HDP/versions/{{ hdp.version }}/artifacts/kerberos_descriptor
    method: GET
    user: admin
    password: "{{ hdp.cluster.password }}"
    status_code: 200
    force_basic_auth: yes
    return_content: yes
    headers:
      X-Requested-By: "ambari"
  register: request_krb

- name: copy Kerberos Descriptor to file
  copy:
    content: "{{ request_krb.content  }}"
    dest: /opt/krbdesc.json
  become: true

- name: remove unwanted properties from Descriptor
  shell: |
     echo >> /opt/krbdesc.json
     sed 's/, "href": "[^"]*"//;s/"stack_name": "HDP",//;s/, "stack_version": "[^"]*"//' /opt/krbdesc.json
  register: file_ds
  become: true


- name: add Kerberos service to cluster {{ hdp.cluster.name }}
  uri:
    url: http://localhost:8080/api/v1/clusters/{{ hdp.cluster.name }}/services/KERBEROS
    method: POST
    user: admin
    password: "{{ hdp.cluster.password }}"
    status_code: 201
    force_basic_auth: yes
    headers:
      X-Requested-By: "ambari"

- name: add Kerberos client component to Kerberos service
  uri:
    url: http://localhost:8080/api/v1/clusters/{{ hdp.cluster.name }}/services/KERBEROS/components/KERBEROS_CLIENT
    method: POST
    user: admin
    password: "{{ hdp.cluster.password }}"
    status_code: 201
    force_basic_auth: yes
    headers:
      X-Requested-By: "ambari"

- name: add Kerberos client on {{ inventory_hostname }}
  uri:
    url: http://localhost:8080/api/v1/clusters/{{ hdp.cluster.name }}/hosts/{{ inventory_hostname }}/host_components/KERBEROS_CLIENT
    method: POST
    user: admin
    password: "{{ hdp.cluster.password }}"
    status_code: 201
    force_basic_auth: yes
    body_format: raw
    headers:
      X-Requested-By: "ambari"

- name: load krb5.conf to ansible
  shell: warn=no sed ':a;N;$!ba;s/\n/\\n/g' /etc/krb5.conf
  register: file_krb5

- name: prepare Kerberos configuration
  template:
    src: kerberos-conf.j2
    dest: /opt/kerberos-conf.json
  become: true

- name: load Kerberos configuration to ansible
  command: cat /opt/kerberos-conf.json 
  register: file_kc

- name: set Kerberos configuration on cluster {{ hdp.cluster.name }}
  uri:
    url: http://localhost:8080/api/v1/clusters/{{ hdp.cluster.name }}
    method: PUT
    user: admin
    password: "{{ hdp.cluster.password }}"
    body: "{{ file_kc.stdout | to_json }}"
    status_code: 200
    force_basic_auth: yes
    body_format: json
    headers:
      X-Requested-By: "ambari"

- name: prepare API payload
  set_fact:
    api_add_kdcadmin:
      Credential:
        principal : admin/admin
        key:  "{{ hdp.cluster.kerberos.password }}"
        type: persisted

- name:  adding KDC administrator credential
  uri:
    url: http://localhost:8080/api/v1/clusters/{{ hdp.cluster.name }}/credentials/kdc.admin.credential
    method: POST
    user: admin
    password: "{{ hdp.cluster.password }}"
    body: "{{ api_add_kdcadmin | to_json  }}"
    status_code: 201,500
    force_basic_auth: yes
    body_format: raw
    headers:
      X-Requested-By: "ambari"

- name: set the Kerberos Descriptor 
  uri:
    url: http://localhost:8080/api/v1/clusters/{{ hdp.cluster.name }}/artifacts/kerberos_descriptor
    method: POST
    user: admin
    password: "{{ hdp.cluster.password }}"
    body:  "{{ file_ds.stdout | to_json }}"
    status_code: 201
    force_basic_auth: yes
    body_format: json
    headers:
      X-Requested-By: "ambari"

- name: Install the Kerberos service
  uri:
    url: http://localhost:8080/api/v1/clusters/{{ hdp.cluster.name }}/services/KERBEROS
    method: PUT
    user: admin
    password: "{{ hdp.cluster.password }}"
    body: '{"RequestInfo":{"context":"Installing Kerberos service"},"Body":{"ServiceInfo":{"state":"INSTALLED"} } }'
    status_code: 202
    force_basic_auth: yes
    body_format: raw
    headers:
      X-Requested-By: "ambari"

- name: wait for installation to complete
  wait_for:
    timeout: 60

- name: prepare API payload
  set_fact:
    api_enable_kerberos:
      session_attributes:
        kerberos_admin:
          principal: admin/admin
          password: "{{ hdp.cluster.kerberos.password }}"
      Clusters:
        security_type: KERBEROS

- name: enable Kerberos on cluster {{ hdp.cluster.name }}
  uri:
    url: http://localhost:8080/api/v1/clusters/{{ hdp.cluster.name }}
    method: PUT
    user: admin
    password: "{{ hdp.cluster.password }}"
    body:  "{{ api_enable_kerberos | to_json  }}"
    status_code: 202
    force_basic_auth: yes
    body_format: raw
    headers:
      X-Requested-By: "ambari"

- name: wait for installation to complete
  wait_for:
    timeout: 60

- name: install the Kerberos client
  uri:
    url: http://localhost:8080/api/v1/clusters/{{ hdp.cluster.name }}/host_components?HostRoles/state=INIT
    method: PUT
    user: admin
    password: "{{ hdp.cluster.password }}"
    body: '{"RequestInfo":{"context":"Installing Kerberos client"},"Body":{"HostRoles":{"state":"INSTALLED"}}}'
    status_code: 200,202
    force_basic_auth: yes
    body_format: raw
    headers:
      X-Requested-By: "ambari"
    when: false

# this task is not required. It's kept just in case
- name: regenerate keytabs
  uri:
    url: http://localhost:8080/api/v1/clusters/{{ hdp.cluster.name }}/?regenerate_keytabs=all
    method: PUT
    user: admin
    password: "{{ hdp.cluster.password }}"
    body:  '{"Clusters":{"security_type":"KERBEROS"}}'
    status_code: 200,202
    force_basic_auth: yes
    body_format: raw
    headers:
      X-Requested-By: "ambari"
  when: false

- name: stopping Zookeeper
  uri:
    url: http://localhost:8080/api/v1/clusters/{{ hdp.cluster.name }}/services/ZOOKEEPER
    method: PUT
    user: admin
    password: "{{ hdp.cluster.password }}"
    body:  '{"RequestInfo": {"context" :"Stopping Zookeeper"}, "Body": {"ServiceInfo": {"state": "INSTALLED"}}}'
    status_code: 202
    force_basic_auth: yes
    body_format: raw
    headers:
      X-Requested-By: "ambari"

- name: wait for Zookeeper to stop
  wait_for:
    port: 2181
    state: stopped
    host: "{{ inventory_hostname }}"
    timeout: 300

- name: starting Zookeeper
  uri:
    url: http://localhost:8080/api/v1/clusters/{{ hdp.cluster.name }}/services/ZOOKEEPER
    method: PUT
    user: admin
    password: "{{ hdp.cluster.password }}"
    body:  '{"RequestInfo": {"context" :"Starting Zookeeper"}, "Body": {"ServiceInfo": {"state": "STARTED"}}}'
    status_code: 202
    force_basic_auth: yes
    body_format: raw
    headers:
      X-Requested-By: "ambari"

- name: wait for Zookeeper 
  wait_for:
    port: 2181
    host: "{{ inventory_hostname }}"
    timeout: 300

  
- name: prepare API payload
  set_fact:
    api_restart_cluster:
      RequestInfo:
        command: RESTART
        context: "Restarting all services"
        operation_level: host_component
      Requests/resource_filters:
        - hosts_predicate: HostRoles/cluster_name="{{ hdp.cluster.name }}"

- name: re-start all services
  uri:
    url: http://localhost:8080/api/v1/clusters/{{ hdp.cluster.name }}/requests
    method: POST
    user: admin
    password: "{{ hdp.cluster.password }}"
    body: "{{ api_restart_cluster | to_json }}"
    status_code: 202
    force_basic_auth: yes
    body_format: raw
    headers:
      X-Requested-By: "ambari"

- name: wait 5 minutes
  wait_for:
    timeout: 300
  delegate_to: localhost

- name: wait for services 
  wait_for:
    msg: "Checking {{ item.key }}"
    port: "{{ item.value }}"
    host: "{{ inventory_hostname }}"
    timeout: 300
  with_dict: "{{ hdp.cluster.ports }}"

