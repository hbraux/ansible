# generic script to install an Apache TAR package 

- name: installation of {{ install.module }}-{{ install.version }}
  set_fact:
    artifact: "{{ install.module }}-{{ install.version }}"

- name: declare url and archive
  set_fact:
    url: "{{ mirror.apache }}/{{ install.module }}/{{ artifact }}"
    archive: "{{ artifact }}.tar.gz"

- name: create group {{ install.group }}
  group:
    name: "{{ install.group }}"
    state: present

- name: create user {{ install.user }}
  user:
    name: "{{ install.user }}"
    group: "{{ install.group }}"
    
- name: create data directory {{ path.data }}
  file:
    path: "{{ path.data }}"
    owner: "{{ install.user }}"
    group: "{{ install.group }}"
    state: directory
  
- name: create log directory {{ path.log }}
  file:
    path: "{{ path.log }}"
    owner: "{{ install.user }}"
    group: "{{ install.group }}"
    state: directory
    
- name: create config directory {{ path.cfg }}
  file:
    path: "{{ path.cfg }}"
    owner: "{{ install.user }}"
    group: "{{ install.group }}"
    state: directory
  when: install.configuration is defined
  
- name: check if {{ archive }} is in {{ cache.local }}
  command: test -f {{ cache.local }}/{{ archive }}
  register: is_downloaded
  changed_when: False
  delegate_to: localhost
  
- name: download {{ archive }} from {{ url }}
  get_url:
    url: "{{ url }}/{{ archive }}"
    dest: "{{ cache.local }}"
  environment: "{{proxy_env}}"
  when: is_downloaded.rc == 1
  delegate_to: localhost

- name: unarchive {{ archive }}
  unarchive:
    src: "{{ cache.local }}/{{ archive }}"
    dest: /opt
    owner: "{{ install.user }}"
    group: "{{ install.group }}"
                          
- name: create link {{ root.bin }}/{{ install.module }} to {{ path.bin }}
  file:
    src: "{{ path.bin }}"
    dest: "{{ root.bin }}/{{ install.module }}"
    state: link

- name: configure {{ install.module }}
  template:
    src: "{{ item }}.j2"
    dest: "{{ path.cfg }}/{{ item }}"
    owner: "{{ install.user }}"
    group: "{{ install.group }}"
  with_items: "{{ install.configuration }}"
  when: install.configuration is defined
  
- name: install data files
  template:
    src: "{{ item }}.j2"
    dest: "{{ path.data }}/{{ item }}"
    owner: "{{ install.user }}"
    group: "{{ install.group }}"
  with_items: "{{ install.datafiles }}"
  when: install.datafiles is defined
  
- name: install systemd scripts
  template:
    src: "{{ item }}-service.j2"
    dest: /etc/systemd/system/{{ item }}.service
  with_items: "{{ install.services }}"
  when: install.services is defined

- name: start services
  service: name="{{ item }}" state=started enabled=yes
  with_items: "{{ install.services }}"
  when: install.services is defined
