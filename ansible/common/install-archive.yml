- name: installation of {{ install.module }}-{{ install.version }}
  debug:
    msg: install={{ install }}
    verbosity: 1
    
- set_fact:
    url: "{{ global.mirrors.apache }}/{{ install.file | dirname }}"
    archive: "{{ install.file | basename }}"
  when: install.file is defined

- set_fact:
    url: "{{ global.mirrors.apache }}/{{ install.module }}/{{ install.module }}-{{ install.version }}"
    archive: "{{ install.module }}-{{ install.version }}.tar.gz"
  when: install.file is not defined

- name: create group {{ install.group }}
  group:
    name: "{{ install.group }}"
    state: present

- name: create user {{ install.user }}
  user:
    name: "{{ install.user }}"
    group: "{{ install.group }}"
    
- name: create data directory {{ install.path.data }}
  file:
    path: "{{ install.path.data }}"
    owner: "{{ install.user }}"
    group: "{{ install.group }}"
    state: directory
  
- name: create log directory {{ install.path.log }}
  file:
    path: "{{ install.path.log }}"
    owner: "{{ install.user }}"
    group: "{{ install.group }}"
    state: directory
    
- name: create config directory {{ install.path.cfg }}
  file:
    path: "{{ install.path.cfg }}"
    owner: "{{ install.user }}"
    group: "{{ install.group }}"
    state: directory
  when: install.cfg is defined
  
- name: check if {{ archive }} is in {{ global.localhost.cache }}
  stat:
    path: "{{ global.localhost.cache }}/{{ archive }}"
  register: f
  delegate_to: localhost
  
- name: download {{ archive }} from {{ url }}
  get_url:
    url: "{{ url }}/{{ archive }}"
    dest: "{{ global.localhost.cache  }}"
  environment:
    http_proxy: "{{ global.localhost.http_proxy }}"
  when: not f.stat.exists 
  delegate_to: localhost

- name: unarchive {{ archive }}
  unarchive:
    src: "{{ global.localhost.cache }}/{{ archive }}"
    dest: /opt
    owner: "{{ install.user }}"
    group: "{{ install.group }}"
                          
- name: create link {{ install.path.opt }} to {{ install.path.bin }}
  file:
    src: "{{ install.path.bin }}"
    dest: "{{ install.path.opt }}"
    state: link

- name: configure {{ install.module }}
  template:
    src: "{{ item }}.j2"
    dest: "{{ install.path.cfg }}/{{ item }}"
    owner: "{{ install.user }}"
    group: "{{ install.group }}"
  with_items: "{{ install.cfg }}"
  when: install.cfg is defined
  
- name: create data files
  template:
    src: "{{ item }}.j2"
    dest: "{{ install.path.data }}/{{ item }}"
    owner: "{{ install.user }}"
    group: "{{ install.group }}"
  with_items: "{{ install.data }}"
  when: install.data is defined
  
- name: install systemd scripts
  template:
    src: "{{ item }}-service.j2"
    dest: /etc/systemd/system/{{ item }}.service
  with_items: "{{ install.services }}"
  when: install.services is defined

- name: start services
  service: name="{{ item }}" state=started enabled=yes
  with_items: "{{ install.services }}"
  when: install.services is defined

