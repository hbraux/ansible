# genric script on install an Apache package remotely

- name: installation of {{ install.module }}-{{ install.version }}
  set_fact:
    artifact: "{{ install.module }}-{{ install.version }}"

- name: declare variables
  set_fact:
    url: "{{ mirror.apache }}/{{ install.module }}/{{ artifact }}"
    archive: "{{ artifact }}.tar.gz"
    bindir: "{{ install.bin }}/{{ artifact }}"
    logdir: "{{ install.log }}/{{ install.module }}"
    datadir: "{{ install.data }}/{{ install.module }}"
    cfgdir: "{{ install.cfg }}/{{ install.module }}"

- name: create group {{ install.group }}
  group:
    name: "{{ install.group }}"
    state: present

- name: create user {{ install.user }}
  user:
    name: "{{ install.user }}"
    group: "{{ install.group }}"
    
- name: create data directory {{ datadir }}
  file:
    path: "{{ datadir }}"
    owner: "{{ install.user }}"
    group: "{{ install.group }}"
    state: directory
    
- name: create log directory {{ logdir }}
  file:
    path: "{{ logdir }}"
    owner: "{{ install.user }}"
    group: "{{ install.group }}"
    state: directory
    
- name: check if {{ archive }} is in {{ cache.local }}/
  command: test -f {{ cache.local }}/{{ archive }}
  register: downloaded
  changed_when: False
  failed_when: downloaded.rc not in [0, 1]
  delegate_to: localhost
  
- name: download {{ archive }} from {{ url }}
  get_url:
    url: "{{ url }}/{{ archive }}"
    dest: "{{ cache.local }}"
  environment: "{{proxy_env}}"
  when: downloaded.rc == 1
  delegate_to: localhost

- name: upload {{ archive }} to {{ inventory_hostname }} 
  copy:
    src: "{{ cache.local }}/{{ archive }}"
    dest: "{{ cache.dest }}/{{ archive }}"
  
- name: unarchive {{ archive }}
  unarchive:
    src: "{{ cache.local }}/{{ archive }}"
    dest: "{{ install.bin }}"
    owner: "{{ install.user }}"
    group: "{{ install.group }}"
                          
- name: create link {{ install.bin }}/{{ install.module }}
  file:
    src: "{{ bindir }}"
    dest: "{{ install.bin }}/{{ install.module }}"
    state: link


- name: configure {{ install.module }}
  template:
    src: "{{ item }}.j2"
    dest: "{{ cfgdir}}/{{ item }}"
  with_items: "{{ install.configuration }}"

- name: install data files
  template:
    src: "{{ item }}.j2"
    dest: "{{ datadir}}/{{ item }}"
  with_items: "{{ install.datafiles }}"
                 
- name: install systemd scripts
  template:
    src: "{{ item }}-service.j2"
    dest: "/etc/systemd/system/{{ item }}-service"
  with_items: "{{ install.systemd }}"  
  notify: start {{ item }}
